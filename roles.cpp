////////////////////////////////////////////////////
// Automatically generated by "generate-roles.go" //
////////////////////////////////////////////////////

#include "roles.h"

static const char *no_rule = "role.empty";
static const char *unknown_rule = "role.unknown";
static const char *id_to_roles[] = {
    "role.Role(0)",
    "role.SimpleIdentifier",
    "role.QualifiedIdentifier",
    "role.BinaryExpression",
    "role.BinaryExpressionLeft",
    "role.BinaryExpressionRight",
    "role.BinaryExpressionOp",
    "role.Infix",
    "role.Postfix",
    "role.OpBitwiseLeftShift",
    "role.OpBitwiseRightShift",
    "role.OpBitwiseUnsignedRightShift",
    "role.OpBitwiseOr",
    "role.OpBitwiseXor",
    "role.OpBitwiseAnd",
    "role.Expression",
    "role.Statement",
    "role.OpEqual",
    "role.OpNotEqual",
    "role.OpLessThan",
    "role.OpLessThanEqual",
    "role.OpGreaterThan",
    "role.OpGreaterThanEqual",
    "role.OpSame",
    "role.OpNotSame",
    "role.OpContains",
    "role.OpNotContains",
    "role.OpPreIncrement",
    "role.OpPostIncrement",
    "role.OpPreDecrement",
    "role.OpPostDecrement",
    "role.OpNegative",
    "role.OpPositive",
    "role.OpBitwiseComplement",
    "role.OpDereference",
    "role.OpTakeAddress",
    "role.File",
    "role.OpBooleanAnd",
    "role.OpBooleanOr",
    "role.OpBooleanNot",
    "role.OpBooleanXor",
    "role.OpAdd",
    "role.OpSubstract",
    "role.OpMultiply",
    "role.OpDivide",
    "role.OpMod",
    "role.PackageDeclaration",
    "role.ImportDeclaration",
    "role.ImportPath",
    "role.ImportAlias",
    "role.FunctionDeclaration",
    "role.FunctionDeclarationBody",
    "role.FunctionDeclarationName",
    "role.FunctionDeclarationReceiver",
    "role.FunctionDeclarationArgument",
    "role.FunctionDeclarationArgumentName",
    "role.FunctionDeclarationArgumentDefaultValue",
    "role.FunctionDeclarationVarArgsList",
    "role.TypeDeclaration",
    "role.TypeDeclarationBody",
    "role.TypeDeclarationBases",
    "role.TypeDeclarationImplements",
    "role.VisibleFromInstance",
    "role.VisibleFromType",
    "role.VisibleFromSubtype",
    "role.VisibleFromPackage",
    "role.VisibleFromSubpackage",
    "role.VisibleFromModule",
    "role.VisibleFromFriend",
    "role.VisibleFromWorld",
    "role.If",
    "role.IfCondition",
    "role.IfBody",
    "role.IfElse",
    "role.Switch",
    "role.SwitchCase",
    "role.SwitchCaseCondition",
    "role.SwitchCaseBody",
    "role.SwitchDefault",
    "role.For",
    "role.ForInit",
    "role.ForExpression",
    "role.ForUpdate",
    "role.ForBody",
    "role.ForEach",
    "role.While",
    "role.WhileCondition",
    "role.WhileBody",
    "role.DoWhile",
    "role.DoWhileCondition",
    "role.DoWhileBody",
    "role.Break",
    "role.Continue",
    "role.Goto",
    "role.Block",
    "role.BlockScope",
    "role.Return",
    "role.Try",
    "role.TryBody",
    "role.TryCatch",
    "role.TryFinally",
    "role.Throw",
    "role.Assert",
    "role.Call",
    "role.CallReceiver",
    "role.CallCallee",
    "role.CallPositionalArgument",
    "role.CallNamedArgument",
    "role.CallNamedArgumentName",
    "role.CallNamedArgumentValue",
    "role.Noop",
    "role.BooleanLiteral",
    "role.ByteLiteral",
    "role.ByteStringLiteral",
    "role.CharacterLiteral",
    "role.ListLiteral",
    "role.MapLiteral",
    "role.NullLiteral",
    "role.NumberLiteral",
    "role.RegexpLiteral",
    "role.SetLiteral",
    "role.StringLiteral",
    "role.TupleLiteral",
    "role.TypeLiteral",
    "role.OtherLiteral",
    "role.MapEntry",
    "role.MapKey",
    "role.MapValue",
    "role.Type",
    "role.PrimitiveType",
    "role.Assignment",
    "role.AssignmentVariable",
    "role.AssignmentValue",
    "role.AugmentedAssignment",
    "role.AugmentedAssignmentOperator",
    "role.AugmentedAssignmentVariable",
    "role.AugmentedAssignmentValue",
    "role.This",
    "role.Comment",
    "role.Documentation",
    "role.Whitespace",
};
#define TOTAL_ROLES  141

const char *role_name_for_id(uint16_t id) {
	if(id == 0) {
		return no_rule;
	}
	if(id >= TOTAL_ROLES) {
		return unknown_rule;
	}
	return id_to_roles[id];
}

