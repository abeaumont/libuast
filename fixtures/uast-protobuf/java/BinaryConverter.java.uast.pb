
CompilationUnit]
TypeDeclaration
	interfacefalse
internalRoletypes3
Modifier
internalRole	modifiers"public*<

SimpleName
internalRolename"BinaryConverter*:´
MethodDeclaration
constructorfalse 
internalRolebodyDeclarations3
Modifier
internalRole	modifiers"public*,3
Modifier
internalRole	modifiers"static*38
PrimitiveType
internalRolereturnType2"void*:2

SimpleName
internalRolename"main*?:4≥
SingleVariableDeclaration
internalRole
parameters
varargsfalse™
	ArrayType
internalRoletype^

SimpleType
internalRoleelementType3

SimpleName
internalRolename"String*D:'
	Dimension
internalRole
dimensions2

SimpleName
internalRolename"args*M:7*D:6≈
Block
internalRolebody†
ForStatement
internalRole
statementsÊ
VariableDeclarationExpression
internalRoleinitializers0
PrimitiveType
internalRoletype"int*aÒ
VariableDeclarationFragment
internalRole	fragments.

SimpleName
internalRolename"i*e:Ü
PrefixExpression
internalRoleinitializer
operator-=
NumberLiteral
internalRoleoperand

token5*j:v*i::P≈
InfixExpression
internalRole
expression
operator<6

SimpleName
internalRoleleftOperand"i*m:D
NumberLiteral
internalRolerightOperand
token33*q:v*m:Qz
PostfixExpression
internalRoleupdaters
operator++1

SimpleName
internalRoleoperand"i*u:*u:R¬
Block
internalRolebodyÆ
ExpressionStatement
internalRole
statements˜
MethodInvocation
internalRole
expressionù
QualifiedName
internalRole
expression9

SimpleName
internalRole	qualifier"System*à:1

SimpleName
internalRolename"out*è::h6

SimpleName
internalRolename"println*ì:iÎ
InfixExpression
operator+
internalRole	arguments7

SimpleName
internalRoleleftOperand"i*õ:>
StringLiteral
internalRolerightOperand"": "*ü:yß
MethodInvocation 
internalRoleextendedOperands7

SimpleName
internalRolename"toBinary*¶:i5

SimpleName
internalRole	arguments"i*Ø:j:g*õ:j):g:˜
ExpressionStatement
internalRole
statements¿
MethodInvocation
internalRole
expressionù
QualifiedName
internalRole
expression9

SimpleName
internalRole	qualifier"System*¡:1

SimpleName
internalRolename"out*»::h6

SimpleName
internalRolename"println*Ã:i5

SimpleName
internalRole	arguments"i*‘:j:g:Ú
ExpressionStatement
internalRole
statementsª
MethodInvocation
internalRole
expressionù
QualifiedName
internalRole
expression9

SimpleName
internalRole	qualifier"System*á	:1

SimpleName
internalRolename"out*é	::h6

SimpleName
internalRolename"println*í	:iØ
InfixExpression
internalRole	arguments
operator+7

SimpleName
internalRoleleftOperand"i*ö	:>
StringLiteral
internalRolerightOperand"": "*û	:yÎ
MethodInvocation 
internalRoleextendedOperands<

SimpleName
internalRole
expression"Integer*•	:h=

SimpleName
internalRolename"toBinaryString*≠	:i5

SimpleName
internalRole	arguments"i*º	:j:g*ö	:j):g::S_^:O:3_^*,:E2Œ&
MethodDeclaration 
internalRolebodyDeclarations
constructorfalse4
Modifier
internalRole	modifiers"public*π4
Modifier
internalRole	modifiers"static*¿_

SimpleType
internalRolereturnType24

SimpleName
internalRolename"String*«:7

SimpleName
internalRolename"toBinary*Œ:4¿
SingleVariableDeclaration
varargsfalse
internalRole
parameters1
PrimitiveType
internalRoletype"int*◊8

SimpleName
internalRolename"	base10Num*€:7*◊:6¨"
Block
internalRolebody≥
VariableDeclarationStatement
internalRole
statements5
PrimitiveType
internalRoletype"boolean*ø
VariableDeclarationFragment
internalRole	fragments3

SimpleName
internalRolename"isNeg*¯:œ
InfixExpression
internalRoleinitializer
operator<?

SimpleName
internalRoleleftOperand"	base10Num*Ä:D
NumberLiteral
internalRolerightOperand

token0*å:v*Ä:£
ExpressionStatement
internalRole
statementsÏ

Assignment
operator=
internalRole
expressionA

SimpleName
internalRoleleftHandSide"	base10Num*ò:É‰
MethodInvocation
internalRolerightHandSide9

SimpleName
internalRole
expression"Math*§:h2

SimpleName
internalRolename"abs*©:i=

SimpleName
internalRole	arguments"	base10Num*≠:j:gÑ*ò:Ç:¡
VariableDeclarationStatement
internalRole
statementsX

SimpleType
internalRoletype4

SimpleName
internalRolename"String* :™
VariableDeclarationFragment
internalRole	fragments4

SimpleName
internalRolename"result*—::
StringLiteral
internalRoleinitializer"""*⁄:yç	
WhileStatement
internalRole
statementsœ
InfixExpression
operator>
internalRole
expression?

SimpleName
internalRoleleftOperand"	base10Num*˜:D
NumberLiteral

token1
internalRolerightOperand*É:v*˜:Và
Block
internalRolebody÷
ExpressionStatement
internalRole
statementsü

Assignment
operator=
internalRole
expression>

SimpleName
internalRoleleftHandSide"result*î:Éö
InfixExpression
operator+
internalRolerightHandSideã
ParenthesizedExpression
internalRoleleftOperandœ
InfixExpression
internalRole
expression
operator%?

SimpleName
internalRoleleftOperand"	base10Num*û:D
NumberLiteral
internalRolerightOperand

token2*™:v*û:-:=

SimpleName
internalRolerightOperand"result*Ø:*ù:)Ñ*î:Ç:ä
ExpressionStatement
internalRole
statements”

Assignment
internalRole
expression
operator/=A

SimpleName
internalRoleleftHandSide"	base10Num*ƒ:ÉF
NumberLiteral
internalRolerightHandSide

token2*—:vÑ*ƒ:ÇÜÖ,::W_^:UÄ
AssertStatement
internalRole
statementsÚ
InfixExpression
operator||
internalRole
expression—
InfixExpression
internalRoleleftOperand
operator==?

SimpleName
internalRoleleftOperand"	base10Num*Ô:D
NumberLiteral
internalRolerightOperand

token0*¸:v*Ô:“
InfixExpression
internalRolerightOperand
operator==?

SimpleName
internalRoleleftOperand"	base10Num*Å:D
NumberLiteral
internalRolerightOperand

token1*é:v*Å:*Ô:&◊
InfixExpression
internalRolemessage
operator+N
StringLiteral
internalRoleleftOperand""value is not <= 1: "*í:y@

SimpleName
internalRolerightOperand"	base10Num*™:*í:):fâ
ExpressionStatement
internalRole
statements“

Assignment
internalRole
expression
operator=>

SimpleName
internalRoleleftHandSide"result*»:ÉÕ
InfixExpression
internalRolerightHandSide
operator+?

SimpleName
internalRoleleftOperand"	base10Num*—:=

SimpleName
internalRolerightOperand"result*›:*—:)Ñ*»:Ç:‹
AssertStatement
internalRole
statements®
MethodInvocation
internalRole
expression9

SimpleName
internalRolename"
all0sAnd1s*ı:i:

SimpleName
internalRole	arguments"result*Ä:j:g:f˙
IfStatement
internalRole
statements:

SimpleName
internalRole
expression"isNeg*†:Gä
ExpressionStatement
internalRolethenStatementœ

Assignment
internalRole
expression
operator=>

SimpleName
internalRoleleftHandSide"result*µ :É 
InfixExpression
internalRolerightHandSide
operator+<
StringLiteral
internalRoleleftOperand""-"*æ :y=

SimpleName
internalRolerightOperand"result*ƒ :*æ :)Ñ*µ :Ç:H"if:Fm
ReturnStatement
internalRole
statements:

SimpleName
internalRole
expression"result*‹!::`:3_^*π:E2µ
MethodDeclaration
constructorfalse 
internalRolebodyDeclarations4
Modifier
internalRole	modifiers"public*ˆ(4
Modifier
internalRole	modifiers"static*˝(<
PrimitiveType
internalRolereturnType2"boolean*Ñ	(9

SimpleName
internalRolename"
all0sAnd1s*å	(:4·
SingleVariableDeclaration
internalRole
parameters
varargsfalseX

SimpleType
internalRoletype4

SimpleName
internalRolename"String*ó	(:2

SimpleName
internalRolename"val*û	(:7*ó	(:6ì
Block
internalRolebodyﬁ
AssertStatement
internalRole
statements∫
InfixExpression
internalRole
expression
operator!=9

SimpleName
internalRoleleftOperand"val*¥	):5
NullLiteral
internalRolerightOperand"null:u*¥	):n
StringLiteral
internalRolemessage":"Failed precondition all0sAnd1s. parameter cannot be null"*¬	):y:fÆ
VariableDeclarationStatement
internalRole
statements5
PrimitiveType
internalRoletype"boolean*á
*∫
VariableDeclarationFragment
internalRole	fragments1

SimpleName
internalRolename"all*è
*:M
BooleanLiteral
booleanValuetrue
internalRoleinitializer*ï
*:où
VariableDeclarationStatement
internalRole
statements1
PrimitiveType
internalRoletype"int*§
+≠
VariableDeclarationFragment
internalRole	fragments/

SimpleName
internalRolename"i*®
+:B
NumberLiteral
internalRoleinitializer

token0*¨
+:vŸ
VariableDeclarationStatement
internalRole
statements2
PrimitiveType
internalRoletype"char*∏
,i
VariableDeclarationFragment
internalRole	fragments/

SimpleName
internalRolename"c*Ω
,:Ù
WhileStatement
internalRole
statements≥
InfixExpression
internalRole
expression
operator&&9

SimpleName
internalRoleleftOperand"all*Ÿ
.:´
InfixExpression
internalRolerightOperand
operator<7

SimpleName
internalRoleleftOperand"i*‡
.:•
MethodInvocation
internalRolerightOperand8

SimpleName
internalRole
expression"val*‰
.:h5

SimpleName
internalRolename"length*Ë
.:i:g*‡
.:*Ÿ
.:V%ã

Block
internalRolebodyï
ExpressionStatement
internalRole
statementsﬁ

Assignment
internalRole
expression
operator=9

SimpleName
internalRoleleftHandSide"c*Ä/:Éﬁ
MethodInvocation
internalRolerightHandSide8

SimpleName
internalRole
expression"val*Ñ/:h5

SimpleName
internalRolename"charAt*à/:i5

SimpleName
internalRole	arguments"i*è/:j:gÑ*Ä/:Ç:ò
ExpressionStatement
internalRole
statements·

Assignment
internalRole
expression
operator=;

SimpleName
internalRoleleftHandSide"all*†0:Éﬂ
InfixExpression
internalRolerightHandSide
operator||≈
InfixExpression
internalRoleleftOperand
operator==7

SimpleName
internalRoleleftOperand"c*¶0:@
CharacterLiteral
internalRolerightOperand"'0'*´0:r*¶0:∆
InfixExpression
operator==
internalRolerightOperand7

SimpleName
internalRoleleftOperand"c*≤0:@
CharacterLiteral
internalRolerightOperand"'1'*∑0:r*≤0:*¶0:&Ñ*†0:Ç:≥
ExpressionStatement
internalRole
statements}
PostfixExpression
operator++
internalRole
expression2

SimpleName
internalRoleoperand"i*…1:*…1:::W_^:Uj
ReturnStatement
internalRole
statements7

SimpleName
internalRole
expression"all*È3::`:3_^*ˆ(:E2*:E::$